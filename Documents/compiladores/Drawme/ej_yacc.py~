import ply.yacc as yacc
import drawme_lex 
import sys

tokens = drawme_lex.tokens

def p_block(p):
	'''block : LB block3 RB'''


def p_block3(p):
	'''block3 : block2 block3
| empty '''



def p_block2(p):
	'''block2 : condition 
| list 
| WID
| rep'''

def p_expresion(p):
	'''expresion : exp ex2 '''

def p_ex2(p):
	'''ex2 : ex3 exp 
| empty'''

def p_ex3(p):
	'''ex3 : LT 
| MT 
| D 
| SEQ'''

def p_exp(p):
	'''exp : term exp2'''
#/* poper saca + o - */

def p_exp2(p):
	'''exp2 : exp3 exp 
| empty'''

def p_exp3(p):
	'''exp3 : ADD 
| SUB'''
#/*mete a poper*/

def p_term(p):
	'''term : fact term2'''
#/*une a poper * o / */

def p_term2(p):
	'''term2 : term3 term 
| empty'''

def p_term3(p):
	'''term3 : M 
| DIV'''
#/*mete a poper*/

def p_fact(p):
	'''fact : LP exp RP 
| fact2'''

def p_fact2(p):
	'''fact2 : fact3 fact4'''

def p_fact3(p):
	'''fact3 : ADD 
| SUB 
| empty'''

def p_fact4(p):
	'''fact4 : ID'''

def p_rep(p):
	'''rep : RE exp block SC'''

def p_WID(p):
	'''WID : ID WID2'''

def p_WID2(p):
	'''WID2 : assigment
| funCall'''

def p_assigment(p):
	'''assigment : EQ expresion SC'''

def p_funCall(p):
	'''funCall : LP func2 RP SC'''

def p_func2(p):
	'''func2 : exp func3 
| empty'''

def p_func3(p):
	'''func3 : C exp 
| empty'''

def p_list(p):
	'''list : L ID EQ LP lista3 RP SC'''

def p_lista2(p):
	'''lista2 : ID'''

def p_lista3(p):
	'''lista3 : lista2 li4'''

def p_li4(p):
	'''li4 : C lista2 li4
| empty'''

def p_condition(p):
	'''condition : IF LP exp RP block con2 SC'''

def p_con2(p):
	'''con2 : empty  
| ELSE block'''

def p_empty(p):
    '''empty : '''

# Error rule for syntax errors
def p_error(p):
    print "Syntax error in input!", p.type

# Build the parser
parser = yacc.yacc()

if(len(sys.argv) > 1):
    if sys.argv[1] == "-f":
        f = open(sys.argv[2], "r")
        s = f.readlines()
    string = ""
    for line in s:
        string += line
    result = parser.parse(string)
else:
    print "):"
